#include "camera.hpp"
#include <cstdlib>
#include <iostream>
#include <raylib.h>
#include <raymath.h>
#include <string>

FoxModel makeCube(Vector3 position, Vector3 scale) {
  return makeCubeColor(position, scale, 0);
}
FoxModel makeCubeColor(Vector3 position, Vector3 scale, int hue) {
  int tris = 108;
  FoxModel ret;
  ret.tris = (FoxTri **)malloc(sizeof(FoxTri *) * tris);

  float vertices[108] = {
      // Front
      -0.5f, 0.5f, 0.5f, -0.5f, -0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f,
      -0.5f, -0.5f, 0.5f, 0.5f, -0.5f, 0.5f,
      // Right
      0.5f, 0.5f, 0.5f, 0.5f, -0.5f, 0.5f, 0.5f, 0.5f, -0.5f, 0.5f, 0.5f, -0.5f,
      0.5f, -0.5f, 0.5f, 0.5f, -0.5f, -0.5f,
      // Back
      0.5f, 0.5f, -0.5f, 0.5f, -0.5f, -0.5f, -0.5f, 0.5f, -0.5f, -0.5f, 0.5f,
      -0.5f, 0.5f, -0.5f, -0.5f, -0.5f, -0.5f, -0.5f,
      // Left
      -0.5f, 0.5f, -0.5f, -0.5f, -0.5f, -0.5f, -0.5f, 0.5f, 0.5f, -0.5f, 0.5f,
      0.5f, -0.5f, -0.5f, -0.5f, -0.5f, -0.5f, 0.5f,
      // Top
      -0.5f, 0.5f, -0.5f, -0.5f, 0.5f, 0.5f, 0.5f, 0.5f, -0.5f, 0.5f, 0.5f,
      -0.5f, -0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f,
      // Bottom
      -0.5f, -0.5f, 0.5f, -0.5f, -0.5f, -0.5f, 0.5f, -0.5f, 0.5f, 0.5f, -0.5f,
      0.5f, -0.5f, -0.5f, -0.5f, 0.5f, -0.5f, -0.5f};

  ret.tris = vertToTri(vertices, tris, position, scale);
  ret.size = tris / 9;
  ret.hue = hue;

  return ret;
}
FoxModel makeTorus(Vector3 position, Vector3 scale) {
  int tris = 864;
  FoxModel ret;
  ret.tris = (FoxTri **)malloc(sizeof(FoxTri *) * tris);

  float vertices[864] = {
      1.25000000,  0.00000000,  0.00000000,  0.79549503,  0.21650635,
      0.79549515,  1.12500000,  0.21650635,  0.00000000,  0.79549503,
      0.21650635,  0.79549515,  0.87500000,  0.21650635,  0.00000000,
      1.12500000,  0.21650635,  0.00000000,  0.87500000,  0.21650635,
      0.00000000,  0.53033006,  0.00000000,  0.53033012,  0.75000000,
      0.00000000,  0.00000000,  0.53033006,  0.00000000,  0.53033012,
      0.87500000,  -0.21650635, 0.00000000,  0.75000000,  0.00000000,
      0.00000000,  0.61871839,  -0.21650635, 0.61871850,  1.12500000,
      -0.21650635, 0.00000000,  0.87500000,  -0.21650635, 0.00000000,
      0.79549503,  -0.21650635, 0.79549515,  1.25000000,  0.00000000,
      0.00000000,  1.12500000,  -0.21650635, 0.00000000,  0.00000009,
      0.00000000,  1.25000000,  0.79549503,  0.21650635,  0.79549515,
      0.88388336,  0.00000000,  0.88388354,  0.79549503,  0.21650635,
      0.79549515,  0.00000007,  0.21650635,  0.87500000,  0.61871839,
      0.21650635,  0.61871850,  0.00000007,  0.21650635,  0.87500000,
      0.53033006,  0.00000000,  0.53033012,  0.61871839,  0.21650635,
      0.61871850,  0.00000006,  0.00000000,  0.75000000,  0.61871839,
      -0.21650635, 0.61871850,  0.53033006,  0.00000000,  0.53033012,
      0.00000007,  -0.21650635, 0.87500000,  0.79549503,  -0.21650635,
      0.79549515,  0.61871839,  -0.21650635, 0.61871850,  0.00000008,
      -0.21650635, 1.12500000,  0.88388336,  0.00000000,  0.88388354,
      0.79549503,  -0.21650635, 0.79549515,  -0.88388371, 0.00000000,
      0.88388324,  0.00000008,  0.21650635,  1.12500000,  0.00000009,
      0.00000000,  1.25000000,  -0.79549533, 0.21650635,  0.79549491,
      0.00000007,  0.21650635,  0.87500000,  0.00000008,  0.21650635,
      1.12500000,  -0.61871856, 0.21650635,  0.61871827,  0.00000006,
      0.00000000,  0.75000000,  0.00000007,  0.21650635,  0.87500000,
      -0.53033018, 0.00000000,  0.53032994,  0.00000007,  -0.21650635,
      0.87500000,  0.00000006,  0.00000000,  0.75000000,  -0.61871856,
      -0.21650635, 0.61871827,  0.00000008,  -0.21650635, 1.12500000,
      0.00000007,  -0.21650635, 0.87500000,  -0.79549533, -0.21650635,
      0.79549491,  0.00000009,  0.00000000,  1.25000000,  0.00000008,
      -0.21650635, 1.12500000,  -1.25000000, 0.00000000,  0.00000011,
      -0.79549533, 0.21650635,  0.79549491,  -0.88388371, 0.00000000,
      0.88388324,  -1.12500000, 0.21650635,  0.00000010,  -0.61871856,
      0.21650635,  0.61871827,  -0.79549533, 0.21650635,  0.79549491,
      -0.87500000, 0.21650635,  0.00000008,  -0.53033018, 0.00000000,
      0.53032994,  -0.61871856, 0.21650635,  0.61871827,  -0.75000000,
      0.00000000,  0.00000007,  -0.61871856, -0.21650635, 0.61871827,
      -0.53033018, 0.00000000,  0.53032994,  -0.87500000, -0.21650635,
      0.00000008,  -0.79549533, -0.21650635, 0.79549491,  -0.61871856,
      -0.21650635, 0.61871827,  -1.12500000, -0.21650635, 0.00000010,
      -0.88388371, 0.00000000,  0.88388324,  -0.79549533, -0.21650635,
      0.79549491,  -0.88388371, 0.00000000,  -0.88388324, -1.12500000,
      0.21650635,  0.00000010,  -1.25000000, 0.00000000,  0.00000011,
      -0.79549533, 0.21650635,  -0.79549491, -0.87500000, 0.21650635,
      0.00000008,  -1.12500000, 0.21650635,  0.00000010,  -0.61871856,
      0.21650635,  -0.61871827, -0.75000000, 0.00000000,  0.00000007,
      -0.87500000, 0.21650635,  0.00000008,  -0.53033018, 0.00000000,
      -0.53032994, -0.87500000, -0.21650635, 0.00000008,  -0.75000000,
      0.00000000,  0.00000007,  -0.87500000, -0.21650635, 0.00000008,
      -0.79549533, -0.21650635, -0.79549491, -1.12500000, -0.21650635,
      0.00000010,  -0.79549533, -0.21650635, -0.79549491, -1.25000000,
      0.00000000,  0.00000011,  -1.12500000, -0.21650635, 0.00000010,
      0.00000009,  0.00000000,  -1.25000000, -0.79549533, 0.21650635,
      -0.79549491, -0.88388371, 0.00000000,  -0.88388324, 0.00000008,
      0.21650635,  -1.12500000, -0.61871856, 0.21650635,  -0.61871827,
      -0.79549533, 0.21650635,  -0.79549491, 0.00000007,  0.21650635,
      -0.87500000, -0.53033018, 0.00000000,  -0.53032994, -0.61871856,
      0.21650635,  -0.61871827, 0.00000006,  0.00000000,  -0.75000000,
      -0.61871856, -0.21650635, -0.61871827, -0.53033018, 0.00000000,
      -0.53032994, -0.61871856, -0.21650635, -0.61871827, 0.00000008,
      -0.21650635, -1.12500000, -0.79549533, -0.21650635, -0.79549491,
      0.00000008,  -0.21650635, -1.12500000, -0.88388371, 0.00000000,
      -0.88388324, -0.79549533, -0.21650635, -0.79549491, 0.88388300,
      0.00000000,  -0.88388395, 0.00000008,  0.21650635,  -1.12500000,
      0.00000009,  0.00000000,  -1.25000000, 0.00000008,  0.21650635,
      -1.12500000, 0.61871809,  0.21650635,  -0.61871880, 0.00000007,
      0.21650635,  -0.87500000, 0.61871809,  0.21650635,  -0.61871880,
      0.00000006,  0.00000000,  -0.75000000, 0.00000007,  0.21650635,
      -0.87500000, 0.53032982,  0.00000000,  -0.53033042, 0.00000007,
      -0.21650635, -0.87500000, 0.00000006,  0.00000000,  -0.75000000,
      0.61871809,  -0.21650635, -0.61871880, 0.00000008,  -0.21650635,
      -1.12500000, 0.00000007,  -0.21650635, -0.87500000, 0.79549474,
      -0.21650635, -0.79549557, 0.00000009,  0.00000000,  -1.25000000,
      0.00000008,  -0.21650635, -1.12500000, 1.25000000,  0.00000000,
      0.00000000,  0.79549474,  0.21650635,  -0.79549557, 0.88388300,
      0.00000000,  -0.88388395, 0.79549474,  0.21650635,  -0.79549557,
      0.87500000,  0.21650635,  0.00000000,  0.61871809,  0.21650635,
      -0.61871880, 0.87500000,  0.21650635,  0.00000000,  0.53032982,
      0.00000000,  -0.53033042, 0.61871809,  0.21650635,  -0.61871880,
      0.75000000,  0.00000000,  0.00000000,  0.61871809,  -0.21650635,
      -0.61871880, 0.53032982,  0.00000000,  -0.53033042, 0.87500000,
      -0.21650635, 0.00000000,  0.79549474,  -0.21650635, -0.79549557,
      0.61871809,  -0.21650635, -0.61871880, 1.12500000,  -0.21650635,
      0.00000000,  0.88388300,  0.00000000,  -0.88388395, 0.79549474,
      -0.21650635, -0.79549557, 1.25000000,  0.00000000,  0.00000000,
      0.88388336,  0.00000000,  0.88388354,  0.79549503,  0.21650635,
      0.79549515,  0.79549503,  0.21650635,  0.79549515,  0.61871839,
      0.21650635,  0.61871850,  0.87500000,  0.21650635,  0.00000000,
      0.87500000,  0.21650635,  0.00000000,  0.61871839,  0.21650635,
      0.61871850,  0.53033006,  0.00000000,  0.53033012,  0.53033006,
      0.00000000,  0.53033012,  0.61871839,  -0.21650635, 0.61871850,
      0.87500000,  -0.21650635, 0.00000000,  0.61871839,  -0.21650635,
      0.61871850,  0.79549503,  -0.21650635, 0.79549515,  1.12500000,
      -0.21650635, 0.00000000,  0.79549503,  -0.21650635, 0.79549515,
      0.88388336,  0.00000000,  0.88388354,  1.25000000,  0.00000000,
      0.00000000,  0.00000009,  0.00000000,  1.25000000,  0.00000008,
      0.21650635,  1.12500000,  0.79549503,  0.21650635,  0.79549515,
      0.79549503,  0.21650635,  0.79549515,  0.00000008,  0.21650635,
      1.12500000,  0.00000007,  0.21650635,  0.87500000,  0.00000007,
      0.21650635,  0.87500000,  0.00000006,  0.00000000,  0.75000000,
      0.53033006,  0.00000000,  0.53033012,  0.00000006,  0.00000000,
      0.75000000,  0.00000007,  -0.21650635, 0.87500000,  0.61871839,
      -0.21650635, 0.61871850,  0.00000007,  -0.21650635, 0.87500000,
      0.00000008,  -0.21650635, 1.12500000,  0.79549503,  -0.21650635,
      0.79549515,  0.00000008,  -0.21650635, 1.12500000,  0.00000009,
      0.00000000,  1.25000000,  0.88388336,  0.00000000,  0.88388354,
      -0.88388371, 0.00000000,  0.88388324,  -0.79549533, 0.21650635,
      0.79549491,  0.00000008,  0.21650635,  1.12500000,  -0.79549533,
      0.21650635,  0.79549491,  -0.61871856, 0.21650635,  0.61871827,
      0.00000007,  0.21650635,  0.87500000,  -0.61871856, 0.21650635,
      0.61871827,  -0.53033018, 0.00000000,  0.53032994,  0.00000006,
      0.00000000,  0.75000000,  -0.53033018, 0.00000000,  0.53032994,
      -0.61871856, -0.21650635, 0.61871827,  0.00000007,  -0.21650635,
      0.87500000,  -0.61871856, -0.21650635, 0.61871827,  -0.79549533,
      -0.21650635, 0.79549491,  0.00000008,  -0.21650635, 1.12500000,
      -0.79549533, -0.21650635, 0.79549491,  -0.88388371, 0.00000000,
      0.88388324,  0.00000009,  0.00000000,  1.25000000,  -1.25000000,
      0.00000000,  0.00000011,  -1.12500000, 0.21650635,  0.00000010,
      -0.79549533, 0.21650635,  0.79549491,  -1.12500000, 0.21650635,
      0.00000010,  -0.87500000, 0.21650635,  0.00000008,  -0.61871856,
      0.21650635,  0.61871827,  -0.87500000, 0.21650635,  0.00000008,
      -0.75000000, 0.00000000,  0.00000007,  -0.53033018, 0.00000000,
      0.53032994,  -0.75000000, 0.00000000,  0.00000007,  -0.87500000,
      -0.21650635, 0.00000008,  -0.61871856, -0.21650635, 0.61871827,
      -0.87500000, -0.21650635, 0.00000008,  -1.12500000, -0.21650635,
      0.00000010,  -0.79549533, -0.21650635, 0.79549491,  -1.12500000,
      -0.21650635, 0.00000010,  -1.25000000, 0.00000000,  0.00000011,
      -0.88388371, 0.00000000,  0.88388324,  -0.88388371, 0.00000000,
      -0.88388324, -0.79549533, 0.21650635,  -0.79549491, -1.12500000,
      0.21650635,  0.00000010,  -0.79549533, 0.21650635,  -0.79549491,
      -0.61871856, 0.21650635,  -0.61871827, -0.87500000, 0.21650635,
      0.00000008,  -0.61871856, 0.21650635,  -0.61871827, -0.53033018,
      0.00000000,  -0.53032994, -0.75000000, 0.00000000,  0.00000007,
      -0.53033018, 0.00000000,  -0.53032994, -0.61871856, -0.21650635,
      -0.61871827, -0.87500000, -0.21650635, 0.00000008,  -0.87500000,
      -0.21650635, 0.00000008,  -0.61871856, -0.21650635, -0.61871827,
      -0.79549533, -0.21650635, -0.79549491, -0.79549533, -0.21650635,
      -0.79549491, -0.88388371, 0.00000000,  -0.88388324, -1.25000000,
      0.00000000,  0.00000011,  0.00000009,  0.00000000,  -1.25000000,
      0.00000008,  0.21650635,  -1.12500000, -0.79549533, 0.21650635,
      -0.79549491, 0.00000008,  0.21650635,  -1.12500000, 0.00000007,
      0.21650635,  -0.87500000, -0.61871856, 0.21650635,  -0.61871827,
      0.00000007,  0.21650635,  -0.87500000, 0.00000006,  0.00000000,
      -0.75000000, -0.53033018, 0.00000000,  -0.53032994, 0.00000006,
      0.00000000,  -0.75000000, 0.00000007,  -0.21650635, -0.87500000,
      -0.61871856, -0.21650635, -0.61871827, -0.61871856, -0.21650635,
      -0.61871827, 0.00000007,  -0.21650635, -0.87500000, 0.00000008,
      -0.21650635, -1.12500000, 0.00000008,  -0.21650635, -1.12500000,
      0.00000009,  0.00000000,  -1.25000000, -0.88388371, 0.00000000,
      -0.88388324, 0.88388300,  0.00000000,  -0.88388395, 0.79549474,
      0.21650635,  -0.79549557, 0.00000008,  0.21650635,  -1.12500000,
      0.00000008,  0.21650635,  -1.12500000, 0.79549474,  0.21650635,
      -0.79549557, 0.61871809,  0.21650635,  -0.61871880, 0.61871809,
      0.21650635,  -0.61871880, 0.53032982,  0.00000000,  -0.53033042,
      0.00000006,  0.00000000,  -0.75000000, 0.53032982,  0.00000000,
      -0.53033042, 0.61871809,  -0.21650635, -0.61871880, 0.00000007,
      -0.21650635, -0.87500000, 0.61871809,  -0.21650635, -0.61871880,
      0.79549474,  -0.21650635, -0.79549557, 0.00000008,  -0.21650635,
      -1.12500000, 0.79549474,  -0.21650635, -0.79549557, 0.88388300,
      0.00000000,  -0.88388395, 0.00000009,  0.00000000,  -1.25000000,
      1.25000000,  0.00000000,  0.00000000,  1.12500000,  0.21650635,
      0.00000000,  0.79549474,  0.21650635,  -0.79549557, 0.79549474,
      0.21650635,  -0.79549557, 1.12500000,  0.21650635,  0.00000000,
      0.87500000,  0.21650635,  0.00000000,  0.87500000,  0.21650635,
      0.00000000,  0.75000000,  0.00000000,  0.00000000,  0.53032982,
      0.00000000,  -0.53033042, 0.75000000,  0.00000000,  0.00000000,
      0.87500000,  -0.21650635, 0.00000000,  0.61871809,  -0.21650635,
      -0.61871880, 0.87500000,  -0.21650635, 0.00000000,  1.12500000,
      -0.21650635, 0.00000000,  0.79549474,  -0.21650635, -0.79549557,
      1.12500000,  -0.21650635, 0.00000000,  1.25000000,  0.00000000,
      0.00000000,  0.88388300,  0.00000000,  -0.88388395,
  };

  ret.tris = vertToTri(vertices, tris, position, scale);
  ret.size = tris / 9;

  return ret;
}

FoxTri **vertToTri(float *vert, int size, Vector3 position, Vector3 scale) {
  if (size % 3 != 0) {
    std::cout << "Model not Tris";
    return nullptr;
  }
  FoxTri **ret = (FoxTri **)malloc(sizeof(FoxTri *) * size / 3);
  Vector3 A;
  Vector3 B;
  Vector3 C;
  Vector3 temp;
  int triProg = 0;
  int triTotal = 0;
  for (int i = 0; i < size; i++) {
    switch (i % 3) {
    case 0:
      temp.x = vert[i] * scale.x;
      break;
    case 1:
      temp.y = vert[i] * scale.y;
      break;
    case 2:
      temp.z = vert[i] * scale.z;
      temp = Vector3Add(temp, position);
      switch (triProg) {
      case 0:
        A = temp;
        break;
      case 1:
        B = temp;
        break;
      case 2:
        C = temp;
        ret[triTotal] = new FoxTri(A, B, C);
        ++triTotal;
        triProg = -1;
        break;
      }
      ++triProg;
      break;
    }
  }
  return ret;
}
